plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.yauntyour.gitbackup'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "jgit-repo"
        url = "https://repo.eclipse.org/content/repositories/jgit-releases/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT")
    implementation("org.eclipse.jgit:org.eclipse.jgit:6.10.0.202406032230-r") {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// Shadow plugin configuration for bundling dependencies
shadowJar {
    relocate 'org.eclipse.jgit', 'com.yauntyour.gitbackup.lib.jgit'
    relocate 'org.apache.http', 'com.yauntyour.gitbackup.lib.http'
    minimize()
    archiveClassifier.set('')
}

// Make the build task depend on shadowJar
build.dependsOn shadowJar

// Configure runServer to use the shadowJar
tasks.runServer {
    dependsOn shadowJar
}